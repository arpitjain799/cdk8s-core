import * as crypto from 'crypto';
// eslint-disable-next-line import/no-extraneous-dependencies
import { Token, Stack, CfnOutput } from 'aws-cdk-lib';
import { Lazy } from './lazy';

export function resolve(value: any, stack?: Stack): any {

  if (value == null) {
    return value;
  }

  // cdk8s token
  if (value instanceof Lazy) {
    const resolved = value.produce();
    return resolve(resolved, stack);
  }

  if (stack && Token.isUnresolved(value)) {
    const resolved = stack.resolve(value);
    const hash = crypto.createHash('sha256');
    hash.update(JSON.stringify(resolved));
    const outputId = hash.digest('hex').slice(0, 10);
    new CfnOutput(stack, outputId, { value });
    return resolve(resolved, stack);
  }

  // implicit token as generated by the cdk8s-cli (e.g IntOrString)
  if (typeof(value.resolve) === 'function') {
    const resolved = value.resolve();
    return resolve(resolved, stack);
  }

  if (typeof(value) !== 'object') {
    return value;
  }

  if (Array.isArray(value)) {
    return value.map(x => resolve(x, stack));
  }

  const result: any = {};

  for (const [k, v] of Object.entries(value)) {
    result[k] = resolve(v, stack);
  }

  return result;

}
