import { ITokenResolver } from './external-token';
import { Lazy } from './lazy';

export function resolve(value: any, externalTokenResolver?: ITokenResolver): any {

  if (value == null) {
    return value;
  }

  // cdk8s token
  if (value instanceof Lazy) {
    const resolved = value.produce();
    return resolve(resolved, externalTokenResolver);
  }

  // implicit token as generated by the cdk8s-cli (e.g IntOrString)
  if (typeof (value.resolve) === 'function') {
    const resolved = value.resolve();
    return resolve(resolved, externalTokenResolver);
  }

  if (typeof (value) !== 'object') {
    return externalTokenResolver?.resolve(value) ?? value;
  }

  if (Array.isArray(value)) {
    return value.map(x => resolve(x, externalTokenResolver));
  }

  const result: any = {};

  for (const [k, v] of Object.entries(value)) {
    result[k] = resolve(v, externalTokenResolver);
  }

  return result;

}
